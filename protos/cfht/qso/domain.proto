syntax = "proto3";

package cfht.qso;
option java_package = "edu.hawaii.cfht.protos.qso";
option java_outer_classname = "DomainProtos";
option java_multiple_files = true;
option java_generic_services = true;


import "cfhtapi/types.proto";

message Identifier {
    /*
     * Generated by the client, must be unique within a program.
     * If the resource has not yet been created, this identifier allows other
     * resources to reference this resource object.  If the resource already
     * exists, client_token should not be used, and instead the server_token
     * should be used.
     *
     * DEVNOTE: In the future, clients will be able to use client_token all
     * the time.  It's just a limit to our current data model.
     *
     * DEVNOTE: Likely, we will ask that clients prepend their runid to their generated
     * IDs to guarantee there are no conflicts and avoid cross project error
     * messages
     */
    string client_token = 1;
    /*
     * Use this to reference a resource which has already
     * been created on the server.
     *
     * Corresponds to the resource label i.e. ic1,
     * this contract may change in the future.
     */
    string server_token = 2;
}

/* Must be configured through phase2 web tool for now */
message InstrumentConfig {
}

/* Must be configured through phase2 web tool for now */
message Constraint {
}

message Target {
    /*
     * Primary identifier of the target resource
     *
     * NB: When using the server_token to refer to existing targets:
     * If this is a FixedTarget, then the server token
     * is the TargetLabel.  If this is a MovingTarget, then
     * the server token is the TargetELabel in phase2.
     *
     * JSON example of referencing a fixed target.
     *
     * "target": {
     *   "identifier": {
     *     "server_token": "Label1"
     *   }
     *   fixed_target": {}
     * }
     *
     * JSON example of referencing a moving target
     *
     * "target": {
     *   "identifier": {
     *     "server_token": "ELabel1"
     *   }
     *   moving_target": {}
     * }
     *
     * Discussion: is this too confusing?  In API it would be nice
     * to not treat MovingTargets and FixedTargets differently
     */
    Identifier identifier = 1;

    /* Human readable name for target
     *
     * Note: this field does not instruct the API to join
     * the additional target information to an existing
     * target (if present).  To do that, use `identifier.server_token`.
     *
     * If name is omitted then it will not be updated, if name is different
     * than the name from the target fourd with `identifier.server_token`, the
     * name will be updated
     */
    string name = 2;

    // Maps to epoch in phase2.  Was told that this is the proper name for the field...
    // though It hink we probably want this to be modified_julian_date
    double equinox = 3;

    /* Target at a fixed location.  Not currently implemented */
    message FixedTarget {
        /* Coordinate for this target */
        cfhtapi.types.SkyCoordinate coordinate = 5;
        oneof pointing {
            /* Obbset from target to look at */
            cfhtapi.types.SkyCoordinate pointing_offset_coordinate = 6;
            /* name of existing pointing - this should be config, if specified the current coordinate is looked up for that name, and copied into the pointing_offset_coordinate*/
            string pointing_name = 7;
        }
        //TODO: Andrea is sending more details on the best way to document this
        // This field will likely be removed eventually
        double magv = 8; // (magh or magv)


        message ProperMotion {
            /* RA mas/yr */
            double ra = 1;
            /* DEC mili arc seconds /year */
            double dec = 2;
        }
        ProperMotion proper_motion = 10;

        /* Temperature in kelvin ( Why is this tied to the target)*/
        // (espedons only)
        double t_effective = 11;
    }

    /* Target which moves along a path */
    message MovingTarget {

        /* A point on the path of a target
         *
         * DEVNOTE: better name
         */
        message Ephemeris {
            /* Date and time for when this ephemeris target is at the coordinate.
             *
             * More can be found about MJD here: http://tycho.usno.navy.mil/mjd.html
             */
            double modified_julian_date = 1 [json_name = "epoch_millis"]; // TODO: Fix
            /* Coordinate on the path of the target */
            cfhtapi.types.SkyCoordinate coordinate = 2;
            /* ??? Something to do with SNR - need to document this change more, we would use magnitude average at the time observed??? */
            double mag = 3;
        }

        // TODO: fix spelling
        repeated Ephemeris ephemeris_point = 1 [json_name = "ephemeris_points"];
    }

    /* Only one subtype can be used, either a fixed target, or an ephemeris target */
    oneof target_subtype {
        /* Currently unsupported */
        FixedTarget fixed_target = 7;
        /* A target that moves through the sky throughout the night, like an astaroid.
         *
         * DEVNOTE: it is not possible to add ephemeris targets after creation.
         * If this functionality is desired we need to add identifiers to the ephemeris
         * to handle idempotence.
         *
         * TODO: remove pluralization of moving_targets
         */
        MovingTarget moving_target = 8 [json_name = "moving_targets"];
    }
}

message ObservingBlock {
    /* Primary identifier for OB */
    Identifier identifier = 1;
    /* Target this OB is associated with */
    Identifier target_identifier = 2;
    /*
     * Constraints this OB must be observed under
     *
     * For now, this is restricted to 1 constraint
     */
    repeated Identifier constraint_identifier = 3 [json_name = "constraint_identifiers"];
    /*
     * InstrumentConfigs that apply to this OB
     *
     * For now, this is restricted to 1 instrument config
     */
    repeated Identifier instrument_config_identifier = 4 [json_name = "instrument_config_identifiers"];

    /* float between 0 and 1 */
    double max_iq_tolerance_percentage = 5;
}

message ObservingGroup {
    /* Primary identifier for this OG */
    Identifier identifier = 1;

    /* ObservationalBlocks that should be observed as part of this OG */
    repeated Identifier observing_block_identifier = 2 [json_name = "observing_block_identifiers"];

    /* rollup of all times & costs */
    int32 item_calc_wover = 3;
    /* priority */
    int32 priority = 4;
}

message Exposure {
    ObservingGroup observing_group = 1;
    ObservingBlock observing_block = 2;
    Target target = 3;
    //ExposureConfig exposure_config = 4;
}